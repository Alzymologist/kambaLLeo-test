macro_rules! nah {
    ($s:expr) => {
        match $s {
            Some(l) => { l },
            None => { panic!("error"); return; }
        }
    }
}

macro_rules! neh {
    ($s:expr) => {
        match $s {
            Ok(l) => { l },
            Err(l) => { panic!("Error"); return; },
        }
    }
}

macro_rules! pr {
    ($n:expr, $s:expr, $display:expr, $align:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Center) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,$n*10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };

    ($n:expr, $s:expr, $display:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Left) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,$n*10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };
    ($s:expr, $display:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Left) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };
}

/*
macro_rules! pixel {
    ($x:expr, $y:expr, $size:expr, $c:expr, $display:expr) => {
        let color = {
            if ( $c ) {BinaryColor::On}
            else {BinaryColor::Off}
        };
        let x_point = (SCREEN_SIZE_X as i32)/2 - $size/2 + $x  ;
        let y_point = (SCREEN_SIZE_Y as i32)/2 - $size/2 + $y  ;
        let point = Point::new(x_point, y_point);
        let pixel = Pixel::<BinaryColor>(point, color);
        pixel.draw($display)?;
    };
}
*/

pub fn pixel<D>(x: i32, y: i32, size: i32, c: bool, display: &mut D)
    where
        D: DrawTarget<Color = BinaryColor>,
{
    let color = { if c {BinaryColor::On} else {BinaryColor::Off} };
    let x_point = (SCREEN_SIZE_X as i32)/2 - size/2 + x;
    let y_point = (SCREEN_SIZE_Y as i32)/2 - size/2 + y;
    let point = Point::new(x_point, y_point);
    let pixel = Pixel::<BinaryColor>(point, color);
    neh!( pixel.draw(display) );
}


use embedded_graphics::{
    mono_font::{
        ascii::{FONT_6X10},
        MonoTextStyle,
    },
    Pixel,
    primitives::Rectangle,
    Drawable,
};
use embedded_graphics_core::{
    draw_target::DrawTarget,
    geometry::{Point, Size},
    pixelcolor::BinaryColor,
};
use embedded_text::{
    alignment::{HorizontalAlignment, VerticalAlignment},
    style::{HeightMode, TextBoxStyleBuilder},
    TextBox,
};

use crate::display_def::*;

use qrcodegen_noheap::{QrCode, QrCodeEcc, Version};


pub fn draw<D>(data_to_qr: &[u8], display: &mut D) -> Result<(), D::Error>
where
    D: DrawTarget<Color = BinaryColor>,
{

// Size SCREEN_SIZE_X=264 SCREEN_SIZE_Y=176

// let mode = "QR";
let mode = "NOFOTO";

if mode == "QR" {

    let len = data_to_qr.len();
    let mut outbuffer = [0u8; Version::new(18).buffer_len()].to_vec();
    let mut dataandtemp = [0u8; Version::new(18).buffer_len()].to_vec();
    dataandtemp[..len].copy_from_slice(data_to_qr);
    let qr_code = QrCode::encode_binary(&mut dataandtemp, len, &mut outbuffer, QrCodeEcc::Low, Version::MIN, Version::new(18), None, true).unwrap();
    let padding:i32 = 30;
    let scaling = {
        if qr_code.version() == Version::new(18) {2}
        else { ( SCREEN_SIZE_Y - (padding as u32)*2 ) as i32/qr_code.size()}
    };
    let size = qr_code.size() * scaling;
    for y in 0..size {
        for x in 0..size {
            pixel(x, y, size, qr_code.get_module(x / scaling, y / scaling), display);
        }
    }

} else if mode == "NOFOTO" {

    let nofoto_image = [
        // 0,0,0,0,0,95,255,128,0,0,0,0,0,0,0,0,0,127,255,255,224,0,0,0,0,0,0,0,0,63,255,255,255,192,0,0,0,0,0,0,0,31,255,255,255,255,0,0,0,0,0,0,0,7,255,255,255,255,254,0,0,0,0,0,0,1,255,255,255,255,255,248,0,0,0,0,0,0,127,255,208,0,127,255,224,0,0,0,0,0,15,255,160,0,0,63,255,0,0,0,0,0,3,255,224,0,0,0,127,252,0,0,0,0,0,127,248,0,0,0,1,255,224,0,0,0,0,31,252,0,0,0,0,3,255,128,0,0,0,3,255,128,0,0,0,0,31,252,0,0,0,0,127,224,0,0,0,0,0,127,224,0,0,0,15,248,0,0,0,0,0,1,255,0,0,0,1,255,0,0,0,0,0,0,15,248,0,0,0,63,224,0,0,0,0,0,0,63,224,0,0,7,248,0,0,0,0,0,0,1,254,0,0,0,255,192,0,0,0,0,0,0,31,240,0,0,31,254,0,0,0,0,0,0,0,127,128,0,3,255,240,0,0,0,0,0,0,3,252,0,0,63,255,0,0,0,0,0,0,0,31,192,0,7,251,252,0,0,0,0,0,0,1,254,0,0,255,63,224,0,0,0,0,0,0,15,240,0,15,225,255,0,0,0,0,0,0,0,127,0,1,252,15,240,0,0,0,0,0,0,3,248,0,63,128,127,192,0,0,0,0,0,0,31,192,3,248,1,254,0,0,0,0,0,0,1,252,0,127,0,31,240,0,0,0,0,0,0,15,224,7,240,0,255,128,0,0,0,0,0,0,126,0,254,0,3,252,63,255,255,192,0,0,7,240,15,224,0,63,225,255,255,254,0,0,0,127,0,252,0,1,255,15,255,255,240,0,0,3,240,31,192,0,7,248,127,255,255,0,0,0,63,129,248,0,0,127,195,255,255,240,0,0,1,248,31,128,0,3,254,31,255,255,128,0,0,31,195,240,0,30,31,240,192,63,255,255,128,1,252,63,0,1,240,255,0,0,127,255,248,0,15,195,240,0,31,131,252,0,3,255,255,128,0,252,127,0,1,252,63,224,32,31,252,248,0,7,231,224,0,31,225,255,15,192,127,3,128,0,126,126,0,1,255,15,240,127,3,240,56,0,7,231,224,0,31,248,127,195,252,63,3,128,0,62,254,0,1,255,193,254,31,225,248,120,0,7,231,192,0,31,255,31,240,254,15,151,128,0,127,252,0,1,255,240,255,135,240,255,248,0,3,255,192,0,31,255,3,252,63,143,255,128,0,63,252,0,1,255,240,63,225,248,255,248,0,3,255,192,0,31,254,1,255,15,135,255,128,0,63,252,0,1,255,225,143,240,120,127,248,0,3,255,192,0,31,254,56,63,195,135,255,128,0,63,252,0,1,255,225,195,254,28,127,248,0,3,255,224,0,31,254,30,31,240,135,255,128,0,63,252,0,1,255,225,240,255,128,127,248,0,3,255,192,0,31,255,31,131,252,7,255,128,0,63,252,0,1,255,240,252,63,192,255,248,0,3,255,192,0,31,255,15,225,255,15,255,128,0,63,252,0,1,255,248,127,143,248,127,248,0,3,247,224,0,31,255,131,248,63,195,255,128,0,126,126,0,1,255,248,63,195,254,31,248,0,7,231,224,0,31,255,224,254,31,240,255,128,0,126,126,0,1,255,254,3,240,127,7,248,0,7,231,240,0,31,255,240,0,7,252,63,128,0,254,63,0,1,255,255,192,0,31,225,248,0,15,195,240,0,31,255,255,0,1,255,15,128,0,252,63,0,1,255,255,252,7,15,248,120,0,15,195,248,0,31,255,255,255,248,127,195,128,1,252,31,128,1,255,255,255,255,195,254,24,0,31,129,252,0,31,255,255,255,254,15,240,128,3,248,15,192,0,0,0,0,0,0,127,128,0,63,0,254,0,0,0,0,0,0,7,248,0,7,240,15,224,0,0,0,0,0,0,31,224,0,127,0,127,0,0,0,0,0,0,1,255,0,15,224,7,240,0,0,0,0,0,0,15,240,0,254,0,63,128,0,0,0,0,0,0,127,192,31,192,3,252,0,0,0,0,0,0,1,254,1,252,0,31,192,0,0,0,0,0,0,31,240,63,128,0,254,0,0,0,0,0,0,0,255,135,240,0,15,240,0,0,0,0,0,0,3,248,255,0,0,127,128,0,0,0,0,0,0,63,255,224,0,3,248,0,0,0,0,0,0,1,255,252,0,0,31,192,0,0,0,0,0,0,7,255,192,0,1,255,0,0,0,0,0,0,0,127,248,0,0,15,248,0,0,0,0,0,0,3,255,0,0,0,127,128,0,0,0,0,0,0,31,224,0,0,3,254,0,0,0,0,0,0,7,252,0,0,0,31,240,0,0,0,0,0,0,255,128,0,0,0,255,192,0,0,0,0,0,63,240,0,0,0,7,254,0,0,0,0,0,7,254,0,0,0,0,63,248,0,0,0,0,1,255,192,0,0,0,1,255,224,0,0,0,0,127,240,0,0,0,0,7,255,0,0,0,0,31,254,0,0,0,0,0,63,255,0,0,0,7,255,192,0,0,0,0,0,255,254,0,0,3,255,240,0,0,0,0,0,3,255,254,128,7,255,252,0,0,0,0,0,0,31,255,255,255,255,255,128,0,0,0,0,0,0,127,255,255,255,255,224,0,0,0,0,0,0,0,255,255,255,255,240,0,0,0,0,0,0,0,1,255,255,255,248,0,0,0,0,0,0,0,0,3,255,255,252,0,0,0,0,0,0,0,0,0,2,255,252,0,0,0,0,0
255,255,255,255,255,255,255,255,255,255,255,255,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,255,255,255,255,255,255,255,255,255,255,255,255
 ];
    let size_x:i32 = 100;
    let size_y:i32 = 100;
    for n in 0..(size_x*size_y) {
        pixel( n%size_x , n/size_x , size_x, (nofoto_image[(n/8) as usize] & (0b10000000>>(n % 8)) != 0), display);
    }
    pr!(1,"No photo with Kampela!",display,"Center");
    pr!(16," (c) Alzymologist OY",display);

} else { panic!("Unknown mode"); }

    Ok(())
}
