macro_rules! nah {
    ($s:expr) => {
        match $s {
            Some(l) => { l },
            None => { panic!("error"); return; }
        }
    }
}

macro_rules! neh {
    ($s:expr) => {
        match $s {
            Ok(l) => { l },
            Err(l) => { panic!("Error"); return; },
        }
    }
}

macro_rules! pr {
    ($n:expr, $s:expr, $display:expr, $align:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Center) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,$n*10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };

    ($n:expr, $s:expr, $display:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Left) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,$n*10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };
    ($s:expr, $display:expr) => {
        let character_style = MonoTextStyle::new(&FONT_6X10, BinaryColor::On);
        let textbox_style = TextBoxStyleBuilder::new()
            .alignment(HorizontalAlignment::Left) // Center)
            .vertical_alignment(VerticalAlignment::Top) // Middle)
            .build();
        let bounds = Rectangle::new(Point::new(0,10), Size::new(SCREEN_SIZE_X, 10));
        TextBox::with_textbox_style($s, bounds, character_style, textbox_style).draw($display)?;
    };
}

/*
macro_rules! pixel {
    ($x:expr, $y:expr, $size:expr, $c:expr, $display:expr) => {
        let color = {
            if ( $c ) {BinaryColor::On}
            else {BinaryColor::Off}
        };
        let x_point = (SCREEN_SIZE_X as i32)/2 - $size/2 + $x  ;
        let y_point = (SCREEN_SIZE_Y as i32)/2 - $size/2 + $y  ;
        let point = Point::new(x_point, y_point);
        let pixel = Pixel::<BinaryColor>(point, color);
        pixel.draw($display)?;
    };
}
*/

pub fn pixel<D>(x: i32, y: i32, size: i32, c: bool, display: &mut D)
    where
        D: DrawTarget<Color = BinaryColor>,
{
    let color = { if c {BinaryColor::On} else {BinaryColor::Off} };
    let x_point = (SCREEN_SIZE_X as i32)/2 - size/2 + x;
    let y_point = (SCREEN_SIZE_Y as i32)/2 - size/2 + y;
    let point = Point::new(x_point, y_point);
    let pixel = Pixel::<BinaryColor>(point, color);
    neh!( pixel.draw(display) );
}


use embedded_graphics::{
    mono_font::{
        ascii::{FONT_6X10},
        MonoTextStyle,
    },
    Pixel,
    primitives::Rectangle,
    Drawable,
};
use embedded_graphics_core::{
    draw_target::DrawTarget,
    geometry::{Point, Size},
    pixelcolor::BinaryColor,
};
use embedded_text::{
    alignment::{HorizontalAlignment, VerticalAlignment},
    style::{HeightMode, TextBoxStyleBuilder},
    TextBox,
};

use crate::display_def::*;

use qrcodegen_noheap::{QrCode, QrCodeEcc, Version};


pub fn draw<D>(data_to_qr: &[u8], display: &mut D) -> Result<(), D::Error>
where
    D: DrawTarget<Color = BinaryColor>,
{

// Size SCREEN_SIZE_X=264 SCREEN_SIZE_Y=176

// let mode = "QR";
let mode = "NOFOTO";

if mode == "QR" {

    let len = data_to_qr.len();
    let mut outbuffer = [0u8; Version::new(18).buffer_len()].to_vec();
    let mut dataandtemp = [0u8; Version::new(18).buffer_len()].to_vec();
    dataandtemp[..len].copy_from_slice(data_to_qr);
    let qr_code = QrCode::encode_binary(&mut dataandtemp, len, &mut outbuffer, QrCodeEcc::Low, Version::MIN, Version::new(18), None, true).unwrap();
    let padding:i32 = 30;
    let scaling = {
        if qr_code.version() == Version::new(18) {2}
        else { ( SCREEN_SIZE_Y - (padding as u32)*2 ) as i32/qr_code.size()}
    };
    let size = qr_code.size() * scaling;
    for y in 0..size {
        for x in 0..size {
            pixel(x, y, size, qr_code.get_module(x / scaling, y / scaling), display);
        }
    }

} else if mode == "NOFOTO" {

    let nofoto_image = [
        // 0,0,0,0,0,95,255,128,0,0,0,0,0,0,0,0,0,127,255,255,224,0,0,0,0,0,0,0,0,63,255,255,255,192,0,0,0,0,0,0,0,31,255,255,255,255,0,0,0,0,0,0,0,7,255,255,255,255,254,0,0,0,0,0,0,1,255,255,255,255,255,248,0,0,0,0,0,0,127,255,208,0,127,255,224,0,0,0,0,0,15,255,160,0,0,63,255,0,0,0,0,0,3,255,224,0,0,0,127,252,0,0,0,0,0,127,248,0,0,0,1,255,224,0,0,0,0,31,252,0,0,0,0,3,255,128,0,0,0,3,255,128,0,0,0,0,31,252,0,0,0,0,127,224,0,0,0,0,0,127,224,0,0,0,15,248,0,0,0,0,0,1,255,0,0,0,1,255,0,0,0,0,0,0,15,248,0,0,0,63,224,0,0,0,0,0,0,63,224,0,0,7,248,0,0,0,0,0,0,1,254,0,0,0,255,192,0,0,0,0,0,0,31,240,0,0,31,254,0,0,0,0,0,0,0,127,128,0,3,255,240,0,0,0,0,0,0,3,252,0,0,63,255,0,0,0,0,0,0,0,31,192,0,7,251,252,0,0,0,0,0,0,1,254,0,0,255,63,224,0,0,0,0,0,0,15,240,0,15,225,255,0,0,0,0,0,0,0,127,0,1,252,15,240,0,0,0,0,0,0,3,248,0,63,128,127,192,0,0,0,0,0,0,31,192,3,248,1,254,0,0,0,0,0,0,1,252,0,127,0,31,240,0,0,0,0,0,0,15,224,7,240,0,255,128,0,0,0,0,0,0,126,0,254,0,3,252,63,255,255,192,0,0,7,240,15,224,0,63,225,255,255,254,0,0,0,127,0,252,0,1,255,15,255,255,240,0,0,3,240,31,192,0,7,248,127,255,255,0,0,0,63,129,248,0,0,127,195,255,255,240,0,0,1,248,31,128,0,3,254,31,255,255,128,0,0,31,195,240,0,30,31,240,192,63,255,255,128,1,252,63,0,1,240,255,0,0,127,255,248,0,15,195,240,0,31,131,252,0,3,255,255,128,0,252,127,0,1,252,63,224,32,31,252,248,0,7,231,224,0,31,225,255,15,192,127,3,128,0,126,126,0,1,255,15,240,127,3,240,56,0,7,231,224,0,31,248,127,195,252,63,3,128,0,62,254,0,1,255,193,254,31,225,248,120,0,7,231,192,0,31,255,31,240,254,15,151,128,0,127,252,0,1,255,240,255,135,240,255,248,0,3,255,192,0,31,255,3,252,63,143,255,128,0,63,252,0,1,255,240,63,225,248,255,248,0,3,255,192,0,31,254,1,255,15,135,255,128,0,63,252,0,1,255,225,143,240,120,127,248,0,3,255,192,0,31,254,56,63,195,135,255,128,0,63,252,0,1,255,225,195,254,28,127,248,0,3,255,224,0,31,254,30,31,240,135,255,128,0,63,252,0,1,255,225,240,255,128,127,248,0,3,255,192,0,31,255,31,131,252,7,255,128,0,63,252,0,1,255,240,252,63,192,255,248,0,3,255,192,0,31,255,15,225,255,15,255,128,0,63,252,0,1,255,248,127,143,248,127,248,0,3,247,224,0,31,255,131,248,63,195,255,128,0,126,126,0,1,255,248,63,195,254,31,248,0,7,231,224,0,31,255,224,254,31,240,255,128,0,126,126,0,1,255,254,3,240,127,7,248,0,7,231,240,0,31,255,240,0,7,252,63,128,0,254,63,0,1,255,255,192,0,31,225,248,0,15,195,240,0,31,255,255,0,1,255,15,128,0,252,63,0,1,255,255,252,7,15,248,120,0,15,195,248,0,31,255,255,255,248,127,195,128,1,252,31,128,1,255,255,255,255,195,254,24,0,31,129,252,0,31,255,255,255,254,15,240,128,3,248,15,192,0,0,0,0,0,0,127,128,0,63,0,254,0,0,0,0,0,0,7,248,0,7,240,15,224,0,0,0,0,0,0,31,224,0,127,0,127,0,0,0,0,0,0,1,255,0,15,224,7,240,0,0,0,0,0,0,15,240,0,254,0,63,128,0,0,0,0,0,0,127,192,31,192,3,252,0,0,0,0,0,0,1,254,1,252,0,31,192,0,0,0,0,0,0,31,240,63,128,0,254,0,0,0,0,0,0,0,255,135,240,0,15,240,0,0,0,0,0,0,3,248,255,0,0,127,128,0,0,0,0,0,0,63,255,224,0,3,248,0,0,0,0,0,0,1,255,252,0,0,31,192,0,0,0,0,0,0,7,255,192,0,1,255,0,0,0,0,0,0,0,127,248,0,0,15,248,0,0,0,0,0,0,3,255,0,0,0,127,128,0,0,0,0,0,0,31,224,0,0,3,254,0,0,0,0,0,0,7,252,0,0,0,31,240,0,0,0,0,0,0,255,128,0,0,0,255,192,0,0,0,0,0,63,240,0,0,0,7,254,0,0,0,0,0,7,254,0,0,0,0,63,248,0,0,0,0,1,255,192,0,0,0,1,255,224,0,0,0,0,127,240,0,0,0,0,7,255,0,0,0,0,31,254,0,0,0,0,0,63,255,0,0,0,7,255,192,0,0,0,0,0,255,254,0,0,3,255,240,0,0,0,0,0,3,255,254,128,7,255,252,0,0,0,0,0,0,31,255,255,255,255,255,128,0,0,0,0,0,0,127,255,255,255,255,224,0,0,0,0,0,0,0,255,255,255,255,240,0,0,0,0,0,0,0,1,255,255,255,248,0,0,0,0,0,0,0,0,3,255,255,252,0,0,0,0,0,0,0,0,0,2,255,252,0,0,0,0,0
        34,79,255,255,255,251,255,255,255,144,16,10,24,2,127,255,255,255,223,255,255,252,16,24,0,150,47,255,255,253,223,127,255,255,136,72,36,0,0,127,255,255,255,255,255,255,252,0,0,4,32,31,255,255,255,254,255,255,255,192,128,72,0,8,127,255,255,255,255,255,255,248,96,32,1,129,7,255,255,255,255,255,255,255,192,0,2,130,128,255,255,255,251,255,255,255,252,1,2,0,33,79,255,255,253,255,255,255,255,193,3,0,0,130,127,255,255,255,255,255,255,252,0,64,66,64,79,255,255,255,255,191,255,255,255,255,0,1,0,127,255,255,250,191,255,255,255,255,253,0,9,47,255,255,119,255,255,255,255,255,255,192,6,0,255,255,255,255,255,255,255,255,255,254,0,0,79,255,255,255,255,255,255,255,255,255,224,9,167,255,255,255,255,255,255,255,255,255,252,0,31,255,255,255,255,255,255,255,255,255,255,224,2,191,255,255,255,255,255,191,255,255,255,254,0,191,255,255,255,252,192,32,159,255,255,255,224,3,255,255,255,244,0,0,0,63,255,255,254,0,127,255,255,192,0,0,0,5,219,255,255,224,1,255,255,240,0,0,0,0,6,143,255,252,0,31,255,240,0,0,0,0,0,134,191,255,192,3,255,252,0,0,0,0,0,3,23,255,248,0,31,255,0,0,0,0,0,0,42,31,255,128,0,127,224,0,0,0,0,0,1,154,63,240,0,7,252,0,0,0,0,0,0,44,185,255,0,0,127,208,0,0,0,0,0,0,117,111,224,0,7,252,128,0,0,0,8,0,22,165,252,0,0,63,192,0,0,2,33,84,0,255,161,192,0,3,252,0,0,0,94,0,0,73,149,84,0,0,31,144,0,0,11,0,0,0,254,170,20,0,1,250,0,0,0,32,0,0,31,92,160,0,0,15,251,224,0,0,0,0,2,38,120,1,130,0,254,254,0,0,80,0,0,98,215,0,1,64,7,254,248,0,4,0,0,8,50,150,0,66,0,31,5,208,0,42,96,1,1,210,0,5,16,3,193,130,128,5,121,224,0,31,0,0,8,0,60,16,4,10,7,192,4,1,112,0,2,0,3,234,72,64,8,56,0,128,92,0,0,9,0,125,87,198,0,0,0,16,3,128,0,3,32,1,163,12,0,0,0,0,0,14,0,0,0,0,21,226,68,0,0,0,64,3,64,0,1,128,0,109,188,32,1,0,0,0,24,32,32,2,0,2,97,128,0,0,0,0,1,64,0,1,0,0,219,133,0,0,0,0,0,56,0,0,15,0,2,32,20,0,0,0,0,6,129,0,1,240,1,8,152,0,0,0,0,0,16,0,0,31,0,33,16,144,0,0,0,0,0,2,0,3,240,5,8,0,0,0,0,0,0,32,0,0,191,0,32,0,0,0,0,0,0,1,0,64,87,240,0,144,0,0,0,0,0,0,36,8,9,255,1,35,0,0,0,0,0,0,5,241,65,127,240,8,128,0,0,0,0,0,0,15,224,63,255,1,30,0,0,0,0,0,0,0,255,127,255,240,10,112,0,0,0,0,0,0,103,26,191,255,0,47,128,0,0,0,0,0,0,162,255,255,240,1,248,0,0,0,0,0,0,23,191,255,255,0,3,128,0,0,0,0,0,0,231,127,255,240,0,64,0,0,0,0,0,0,70,119,255,255,0,4,0,0,0,0,0,0,6,92,255,255,240,0,134,0,0,0,0,0,1,6,95,255,255,0,0,0,12,0,0,0,0,4,47,255,255,240,0,34,0,120,0,0,0,0,135,255,255,255,0,2,48,105,128,0,0,0,8,127,255,255,128,0,16,128,96,0,0,0,1,7,255,255,240,0,0,24,24,160,0,0,0,16,63,255,254,0,0,0,110,83,0,0,0,0,3,255,255,128,0,0,13,188,64,20,0,0,0,63,255,248,0,0,0,181,160,0,0,0,0,7,255,254,0,0,0,6,5,168,0,0,0,128,255,255,224,0,0,0,24,0,0,0,0,8,15,255,252,0,0,0,0,128,0,0,0,0,0,255,255,192,0,0,0,24,81,0,0,0,32,31,255,248,0,0,0,0,192,2,0,0,6,1,255,255,0,0,0,0,2,27,0,0,0,32,63,255,240,0,0,0,0,34,32,0,0,12,3,255,254,0,0,0,0,0,0,128,0,0,0,127,255,192,0,0,0,0,48,0,0,0,208,7,255,248,0,0,0,0,0,128,0,0,6,0,127,255,0,0,0,0,0,12,0,0,1,192,7,255,240,0,0,0,0,0,0,0,0,188,0,127,254,0,0,0,0,0,1,0,0,6,16,7,255,224,0,0,0,0,0,0,0,0,248,128,255,252,0,0,0,0,0,2,64,1,26,0,15,255,128,0,0,0,0,0,16,0,7,212,3,255,248,0,0,0,0,0,0,142,5,250,0,63,255,0,0,0,0,0,0,15,183,254,128,7,255,224,0,0,0,0,0,1,255,255,160,0,255,252,0,0,0,0,0,0,127,255,192,0,15,255,192,0,0,0,0,0,7,255,192,0,1,255,252,0,0,0,0,0,1,255,242,0,0,63,255,192,0,0,0,0,0,63,255,152,0,15,255,240,0,0,0,0,0,7,255,252,64,1,255,255,0,0,0,0,0,0,127,255,192,0,63,159,240,0,0,0,0,0,31,255,236,0,15,241,254,0,0,0,0,0,1,255,254,96,0,255,15,192,0,0,0,0,0,31,255,242,0,31,241,252,0,0,0,0,0,3,255,254,16,3,254,63,192,0,5,144,0,0,31,255,211,0,127,227,254,0,2,66
    ];
    let size_x:i32 = 100;
    let size_y:i32 = 100;
    for n in 0..(size_x*size_y) {
        pixel( n%size_x , n/size_x , size_x, (nofoto_image[(n/8) as usize] & (0b10000000>>(n % 8)) != 0), display);
    }
    pr!(1,"No photo with Kampela!",display,"Center");
    pr!(16," (c) Alzymologist OY",display);

} else { panic!("Unknown mode"); }

    Ok(())
}
